{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "a61d4c95",
   "metadata": {},
   "source": [
    "# *SVM & Naive Bayes Assignment*"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "de062a94",
   "metadata": {},
   "source": [
    "## 1. What is a Support Vector Machine (SVM)?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "613c805d",
   "metadata": {},
   "source": [
    "A Support Vector Machine (SVM) is a supervised machine learning algorithm \n",
    "used for classification and regression tasks. \n",
    "\n",
    "It works by finding the optimal hyperplane that best separates the data \n",
    "points of different classes in an N-dimensional space."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8ad9ad51",
   "metadata": {},
   "source": [
    "## 2.  What is the difference between Hard Margin and Soft Margin SVM?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "764a9494",
   "metadata": {},
   "source": [
    "1. Hard Margin SVM:\n",
    "   - Assumes that the data is perfectly linearly separable.\n",
    "   - No misclassification or overlap between classes is allowed.\n",
    "   - It finds the hyperplane that separates all data points correctly \n",
    "     with the maximum margin.\n",
    "   - Very sensitive to noise and outliers — a single misclassified point \n",
    "     can affect the entire model.\n",
    "\n",
    "2. Soft Margin SVM:\n",
    "   - Allows some misclassification or overlap between classes.\n",
    "   - Introduces a penalty term (C) to balance between maximizing the margin and minimizing classification errors.\n",
    "   - More robust and works well with real-world, noisy datasets."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e2756609",
   "metadata": {},
   "source": [
    "## 3.  What is the mathematical intuition behind SVM?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c3ec5ceb",
   "metadata": {},
   "source": [
    "The mathematical intuition behind Support Vector Machine (SVM) is to find a hyperplane that best separates data points of different classes with the maximum possible margin."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d4f8a57b",
   "metadata": {},
   "source": [
    "## 4.  What is the role of Lagrange Multipliers in SVM?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4b63cb20",
   "metadata": {},
   "source": [
    "Lagrange Multipliers are used in SVM to solve the constrained optimization problem efficiently.\n",
    "- Lagrange Multipliers are the “weights” for support vectors in defining the optimal hyperplane.\n",
    "- They help move from the primal problem (w, b) to the dual problem (α_i), which is more computationally efficient."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0c1456cd",
   "metadata": {},
   "source": [
    "## 5. What are Support Vectors in SVM?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cb925ff1",
   "metadata": {},
   "source": [
    "Support Vectors are the critical data points that lie closest to the decision boundary (hyperplane) in a Support Vector Machine (SVM). They are the points that **actually define the position and orientation** of the hyperplane."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8fce401b",
   "metadata": {},
   "source": [
    "## 6.  What is a Support Vector Classifier (SVC)?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9872f5ea",
   "metadata": {},
   "source": [
    "A Support Vector Classifier (SVC) is an SVM used for classification tasks. It finds the optimal hyperplane that separates data points of different classes while maximizing the margin."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "97d5c988",
   "metadata": {},
   "source": [
    "## 7. What is a Support Vector Regressor (SVR)?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "070f8e6e",
   "metadata": {},
   "source": [
    "A Support Vector Regressor (SVR) is an SVM used for regression tasks. Instead of classifying points, it tries to fit a function within a certain margin (epsilon) around the data points."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b350c685",
   "metadata": {},
   "source": [
    "## 8. What is the Kernel Trick in SVM?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d46b47bd",
   "metadata": {},
   "source": [
    "The Kernel Trick is a technique used in SVM to handle non-linearly separable data by transforming it into a higher-dimensional space where a linear separation is possible."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0bff2a82",
   "metadata": {},
   "source": [
    "## 9.  Compare Linear Kernel, Polynomial Kernel, and RBF Kernel."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eca27180",
   "metadata": {},
   "source": [
    "1. Linear Kernel\n",
    "    - Separates data with a straight line (or hyperplane).\n",
    "    - Works well when data is roughly linear or has very high dimensions.\n",
    "\n",
    "2. Polynomial Kernel\n",
    "    - Considers interactions between features up to a certain degree d.\n",
    "    - Useful when data is somewhat non-linear but the patterns are not too complex.\n",
    "\n",
    "3. RBF (Gaussian) Kernel\n",
    "    - Projects data into a very high (infinite) dimensional space.\n",
    "    - Best for data that is highly non-linear or has complex patterns."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d249caa8",
   "metadata": {},
   "source": [
    "## 10. What is the effect of the C parameter in SVM?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "782fd37e",
   "metadata": {},
   "source": [
    "- C is a regularization parameter that controls the trade-off between maximizing the margin and allowing misclassifications.\n",
    "\n",
    "- Large C:\n",
    "    - The model tries harder to classify all training points correctly.\n",
    "    - Margin can become smaller to avoid misclassifying points.\n",
    "    - Can overfit if data has noise.\n",
    "\n",
    "- Small C:\n",
    "    - The model allows some misclassifications to get a larger margin.\n",
    "    - More tolerant to noise.\n",
    "    - Can generalize better on unseen data."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9527c537",
   "metadata": {},
   "source": [
    "## 11. What is the role of the Gamma parameter in RBF Kernel SVM?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b75cee2c",
   "metadata": {},
   "source": [
    "Gamma controls how far the influence of a single training point reaches.\n",
    "\n",
    "- High gamma:\n",
    "    - Each point’s influence is very close to itself.\n",
    "    - Decision boundary becomes very tight and wiggly.\n",
    "    - Can lead to overfitting.\n",
    "\n",
    "- Low gamma:\n",
    "    - Each point’s influence spreads farther.\n",
    "    - Decision boundary is smoother.\n",
    "    - Better generalization, but may underfit if too low."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2e090d4d",
   "metadata": {},
   "source": [
    "## 12. What is the Naïve Bayes classifier, and why is it called \"Naïve\"?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4fe6493c",
   "metadata": {},
   "source": [
    "The Naïve Bayes classifier is a simple probabilistic machine learning algorithm used for classification. It’s based on Bayes’ Theorem, which calculates the probability of a class given some features.\n",
    "\n",
    "- Why is it called \"Naïve\"?\n",
    "    - It assumes that all features are independent of each other.\n",
    "    - In real life, features are often correlated, so this assumption is a bit “naïve,” but surprisingly, it still works well in many cases."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d9b0319f",
   "metadata": {},
   "source": [
    "## 13.  What is Bayes’ Theorem?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a55f5c63",
   "metadata": {},
   "source": [
    "Bayes’ Theorem is a way to calculate the probability of an event A given that event B has happened.\n",
    "\n",
    "It tells you how to update your belief about an event (A) when you get new evidence (B)."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "22a70718",
   "metadata": {},
   "source": [
    "## 14.  Explain the differences between Gaussian Naïve Bayes, Multinomial Naïve Bayes, and Bernoulli Naïve Bayes?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "86bbe32a",
   "metadata": {},
   "source": [
    "- Gaussian: continuous features, assumes normal distribution.\n",
    "- Multinomial: counts/frequencies (text). \n",
    "- Bernoulli: binary features (presence/absence)."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f0291035",
   "metadata": {},
   "source": [
    "## 15. When should you use Gaussian Naïve Bayes over other variants?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d313e02a",
   "metadata": {},
   "source": [
    "When features are continuous and approximately normally distributed (or you can transform them)."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "be24d9a6",
   "metadata": {},
   "source": [
    "## 16. What are the key assumptions made by Naïve Bayes?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a7dcd51",
   "metadata": {},
   "source": [
    "- Conditional independence of features given class \n",
    "- Feature distributions follow chosen parametric form (e.g., Gaussian)."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9e247823",
   "metadata": {},
   "source": [
    "## 17. What are the advantages and disadvantages of Naïve Bayes?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1c31063b",
   "metadata": {},
   "source": [
    "- **Advantages**: \n",
    "    - Fast, \n",
    "    - Simple, \n",
    "    - Works with small data, \n",
    "    - Robust to irrelevant features. \n",
    "- **Disadvantages**: \n",
    "    - Independence assumption often false, \n",
    "    - Can produce poor probability estimates."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d0427c28",
   "metadata": {},
   "source": [
    "## 18.  Why is Naïve Bayes a good choice for text classification?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "01d08c48",
   "metadata": {},
   "source": [
    "Text (bag-of-words) often high-dim and sparse; independence assumption performs well empirically, and multinomial NB handles counts efficiently."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "72895020",
   "metadata": {},
   "source": [
    "## 19.  Compare SVM and Naïve Bayes for classification tasks."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8c588c8d",
   "metadata": {},
   "source": [
    "- **SVM**: margin-based, often high accuracy, good with high-dim continuous features \n",
    "- **Naive Bayes**: probabilistic, faster, better with small data and text. Choice depends on data and constraints."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "89c806e0",
   "metadata": {},
   "source": [
    "## 20. How does Laplace Smoothing help in Naïve Bayes?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9f4f8f2f",
   "metadata": {},
   "source": [
    "Adds pseudo-counts to avoid zero probabilities for unseen features/classes, stabilizes estimates."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9370098c",
   "metadata": {},
   "source": [
    "# Practical Questions"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4c3e86a5",
   "metadata": {},
   "source": [
    "## 21. Write a Python program to train an SVM Classifier on the Iris dataset and evaluate accuracy?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "0fbd5143",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 1.0\n"
     ]
    }
   ],
   "source": [
    "from sklearn import datasets\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import accuracy_score\n",
    "\n",
    "X,y = datasets.load_iris(return_X_y=True)\n",
    "Xtr,Xte,ytr,yte = train_test_split(X,y,test_size=0.3,random_state=42)\n",
    "clf = SVC(kernel='rbf', C=1.0, gamma='scale').fit(Xtr,ytr)\n",
    "print(\"Accuracy:\", accuracy_score(yte, clf.predict(Xte)))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cda736f1",
   "metadata": {},
   "source": [
    "## 22.  Write a Python program to train two SVM classifiers with Linear and RBF kernels on the Wine dataset, then compare their accuracies."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "f52a834c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "linear 0.9814814814814815\n",
      "rbf 0.7777777777777778\n"
     ]
    }
   ],
   "source": [
    "from sklearn.datasets import load_wine\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import accuracy_score\n",
    "\n",
    "X,y = load_wine(return_X_y=True)\n",
    "Xtr,Xte,ytr,yte = train_test_split(X,y,test_size=0.3,random_state=0)\n",
    "for kernel in ['linear','rbf']:\n",
    "    acc = accuracy_score(yte, SVC(kernel=kernel).fit(Xtr,ytr).predict(Xte))\n",
    "    print(kernel, acc)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "35bfdd4f",
   "metadata": {},
   "source": [
    "## 23. Write a Python program to train an SVM Regressor (SVR) on a housing dataset and evaluate it using Mean Squared Error (MSE)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "681f60a4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MSE: 0.3591402780622908\n"
     ]
    }
   ],
   "source": [
    "from sklearn.datasets import fetch_california_housing\n",
    "from sklearn.svm import SVR\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import mean_squared_error\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "\n",
    "X,y = fetch_california_housing(return_X_y=True)\n",
    "Xtr,Xte,ytr,yte = train_test_split(X,y,test_size=0.25,random_state=1)\n",
    "sc = StandardScaler().fit(Xtr); Xtr_s=sc.transform(Xtr); Xte_s=sc.transform(Xte)\n",
    "svr = SVR(kernel='rbf').fit(Xtr_s,ytr)\n",
    "print(\"MSE:\", mean_squared_error(yte, svr.predict(Xte_s)))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c320b97a",
   "metadata": {},
   "source": [
    "## 24. Write a Python program to train an SVM Classifier with a Polynomial Kernel and visualize the decision boundary"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "68e9d59f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.datasets import make_circles\n",
    "\n",
    "X,y = make_circles(factor=0.5, noise=0.1, random_state=0)\n",
    "clf = SVC(kernel='poly', degree=3).fit(X,y)\n",
    "\n",
    "\n",
    "xx,yy = np.meshgrid(np.linspace(-1.5,1.5,300), np.linspace(-1.5,1.5,300))\n",
    "Z = clf.predict(np.c_[xx.ravel(), yy.ravel()]).reshape(xx.shape)\n",
    "plt.contourf(xx,yy,Z,alpha=0.2); plt.scatter(X[:,0],X[:,1],c=y); plt.title('Poly SVM'); plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1003a98f",
   "metadata": {},
   "source": [
    "##  25. Write a Python program to train a Gaussian Naïve Bayes classifier on the Breast Cancer dataset and evaluate accuracy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "e588c7fb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.9415204678362573\n"
     ]
    }
   ],
   "source": [
    "from sklearn.datasets import load_breast_cancer\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.naive_bayes import GaussianNB\n",
    "from sklearn.metrics import accuracy_score\n",
    "\n",
    "X,y = load_breast_cancer(return_X_y=True)\n",
    "Xtr,Xte,ytr,yte = train_test_split(X,y,test_size=0.3,random_state=42)\n",
    "gnb = GaussianNB().fit(Xtr,ytr)\n",
    "print(\"Accuracy:\", accuracy_score(yte, gnb.predict(Xte)))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ad34c12b",
   "metadata": {},
   "source": [
    "## 26.  Write a Python program to train a Multinomial Naïve Bayes classifier for text classification using the 20 Newsgroups dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "03dc2bbd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.9983164983164983\n"
     ]
    }
   ],
   "source": [
    "from sklearn.datasets import fetch_20newsgroups\n",
    "from sklearn.feature_extraction.text import CountVectorizer\n",
    "from sklearn.naive_bayes import MultinomialNB\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import accuracy_score\n",
    "\n",
    "data = fetch_20newsgroups(subset='all', categories=['rec.autos','sci.space'])\n",
    "X = CountVectorizer().fit_transform(data.data)\n",
    "y = data.target\n",
    "Xtr,Xte,ytr,yte = train_test_split(X,y,test_size=0.3,random_state=0)\n",
    "clf = MultinomialNB().fit(Xtr,ytr)\n",
    "print(\"Accuracy:\", accuracy_score(yte, clf.predict(Xte)))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "32b25e2a",
   "metadata": {},
   "source": [
    "## 27. Write a Python program to train an SVM Classifier with different C values and compare the decision boundaries visually"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "6c670c48",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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b34zRCMdOC6//HIOOOAAGhsbmTZtGqeddhrPP/98xWsWLVrU4+crhOC5554bolEPDJdddlmPZ9huu+0qXjMaf+bjzY7B2rK1ZWvLXRmttmzteHzZMVhbtrYcMxp/pt0Zz7Y8rHZsRiC33XabOeecc8wdd9xhXnrpJXPTTTeZadOmmc9+9rMVrzv77LPNiSeeaNavX1/4s3nz5iEadd/4y1/+YlzXNVdddZVZsWKF+fSnP23q6+vNqlWrSrZ/+eWXTV1dnfn0pz9tVqxYYa666irjuq75+9//PsQj7x8nnHCCueaaa8yzzz5rnnzySfOOd7zD7LDDDqatra3sNffee68BzPPPP1/0Mw7DcAhH3n8uvfRSs9deexU9w8aNG8u2H60/8/Fkx8ZYW7a2bG25O6PRlq0djz87NsbasrXl0fsz7c54tuXhtOMR6VCX4gc/+IGZO3duxTZnn322OfXUU4dmQAPEgQceaC688MKi13bffXfzxS9+sWT7L3zhC2b33Xcveu2CCy4wBx988KCNcSjYuHGjAcx9991Xtk3e4Ldu3Tp0AxsELr30UrPPPvvU3H4s/czHqh0bY205j7Xl8oyln/lYtWVrxzHjyY6NsbZsbXls/Uy7Mp5seTjteESGfJdi27ZtNDc3V223aNEipk2bxm677cb555/Pxo0bh2B0fcP3fR577DGOP/74otePP/54lixZUvKahx56qEf7E044gUcffZQgCAZtrIPNtm3bAGr6Ge+7777MmDGDY489lnvvvXewhzYorFy5kpkzZzJ37lzOPPNMXn755bJtx9LPfCzaMVhb7oq1ZWvLXRlNtmztuJPxZsdgbbka1pZHJ+PNlofLjkeFQ/3SSy/x85//nAsvvLBiu5NOOok//elP3HPPPfzoRz/ikUce4ZhjjiGbzQ7RSHvHG2+8QRRFTJ8+vej16dOns2HDhpLXbNiwoWT7MAx54403Bm2sg4kxhksuuYTDDjuMvffeu2y7GTNmcOWVV3L99ddzww03MG/ePI499ljuv//+IRxt/znooIP4v//7P+644w6uuuoqNmzYwCGHHMLmzZtLth8rP/OxasdgbTmPtWVry10ZbbZs7ThmvNkxWFu2tjx2fqZdGW+2PKx23Osz7X5w6aWXGqDin0ceeaTomrVr15pddtnFnHfeeb2+37p164zruub6668fqEcYUNauXWsAs2TJkqLXv/3tb5t58+aVvGbXXXc13/3ud4teW7x4sQHM+vXrB22sg8lFF11k5syZY1avXt3ra08++WTzzne+cxBGNXS0tbWZ6dOnmx/96Ecl3x9pP3Nrxz2xthxjbdnaciVGui1bO44Z73ZsjLXlalhbHh2Md1seSjt2eud+949PfOITnHnmmRXb7LjjjoWv161bx9FHH83ChQu58sore32/GTNmMGfOHFauXNnra4eCKVOmoJTqsVu2cePGHjsmebbbbruS7R3HYfLkyYM21sHik5/8JDfffDP3338/s2bN6vX1Bx98MH/84x8HYWRDR319PW95y1vK/p6OtJ+5teOeWFu2tgzWlqsx0m3Z2rG14zzWlitjbXnkY215aO14SB3qKVOmMGXKlJrarl27lqOPPpoFCxZwzTXXIGXvo9M3b97M6tWrmTFjRq+vHQo8z2PBggXcddddnH766YXX77rrLk499dSS1yxcuJB//vOfRa/deeed7L///riuO6jjHUiMMXzyk5/kxhtvZNGiRcydO7dP/TzxxBMj9udbK9lslv/85z8cfvjhJd8faT9za8c9sbZsbRmsLVdjpNuytWNrx3msLVfG2vLIxdpyJ0Nqx306Qx9k8mEoxxxzjFmzZk2R/HlX5s2bZ2644QZjjDGtra3ms5/9rFmyZIl55ZVXzL333msWLlxott9+e9PS0jIcj1ETeVn/q6++2qxYscJcfPHFpr6+3rz66qvGGGO++MUvmg996EOF9nmJ98985jNmxYoV5uqrrx6Vsv7/9V//ZSZMmGAWLVpU9PPt6OgotOn+7P/7v/9rbrzxRvPCCy+YZ5991nzxi180wIgNOSrHZz/7WbNo0SLz8ssvm4cffticfPLJprGxccz9zMeTHRtjbdnasrXlsWDL1o7Hnx0bY23Z2vLo/Zl2Zzzb8nDa8Yh0qK+55pqyOSBdAcw111xjjDGmo6PDHH/88Wbq1KnGdV2zww47mLPPPtu89tprw/AEveOXv/ylmTNnjvE8z+y3335F0vZnn322OfLII4vaL1q0yOy7777G8zyz4447ml//+tdDPOL+U+7nm/95GtPz2b///e+bnXfe2SSTSTNp0iRz2GGHmVtuuWXoB99P3ve+95kZM2YY13XNzJkzzbve9S6zfPnywvtj5Wc+3uzYGGvL1patLY8FW7Z2PL7s2Bhry9aWY0bjz7Q749mWh9OOhTHG9O5M22KxWCwWi8VisVgsFsuoKJtlsVgsFovFYrFYLBbLSMM61BaLxWKxWCwWi8VisfQB61BbLBaLxWKxWCwWi8XSB6xDbbFYLBaLxWKxWCwWSx+wDrXFYrFYLBaLxWKxWCx9wDrUFovFYrFYLBaLxWKx9AHrUFssFovFYrFYLBaLxdIHrENtsVgsFovFYrFYLBZLH7AOtcVisVgsFovFYrFYLH3AOtQWi8VisVgsFovFYrH0AetQWywWi8VisVgs/7/9OhYAAAAAGORvPYfdZRHAINQAAAAwBPN0JVzSQtWkAAAAAElFTkSuQmCC",
      "text/plain": [
       "<Figure size 1200x300 with 4 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.datasets import make_blobs\n",
    "X,y = make_blobs(n_samples=100, centers=2, random_state=0)\n",
    "Cs = [0.01, 0.1, 1, 10]\n",
    "fig,axs = plt.subplots(1,len(Cs),figsize=(12,3))\n",
    "for a,C in enumerate(Cs):\n",
    "    clf=SVC(kernel='rbf',C=C).fit(X,y)\n",
    "    xx,yy = np.meshgrid(np.linspace(X[:,0].min()-1,X[:,0].max()+1,200),\n",
    "                        np.linspace(X[:,1].min()-1,X[:,1].max()+1,200))\n",
    "    Z=clf.predict(np.c_[xx.ravel(),yy.ravel()]).reshape(xx.shape)\n",
    "    axs[a].contourf(xx,yy,Z,alpha=0.2); axs[a].scatter(X[:,0],X[:,1],c=y); axs[a].set_title(f\"C={C}\")\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f1c0acfd",
   "metadata": {},
   "source": [
    "## 28.  Write a Python program to train a Bernoulli Naïve Bayes classifier for binary classification on a dataset with binary features."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "2c6c9956",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.5666666666666667\n"
     ]
    }
   ],
   "source": [
    "from sklearn.naive_bayes import BernoulliNB\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import accuracy_score\n",
    "import numpy as np\n",
    "\n",
    "# synthetic binary data\n",
    "X = np.random.randint(0,2,(200,10))\n",
    "y = (X[:,0] ^ X[:,1])  # example label\n",
    "Xtr,Xte,ytr,yte = train_test_split(X,y,test_size=0.3,random_state=1)\n",
    "clf = BernoulliNB().fit(Xtr,ytr)\n",
    "print(\"Accuracy:\", accuracy_score(yte, clf.predict(Xte)))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "23d983a0",
   "metadata": {},
   "source": [
    "## 29. Write a Python program to apply feature scaling before training an SVM model and compare results with unscaled data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "d4a0a856",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Unscaled acc: 0.9239766081871345\n",
      "Scaled acc: 0.9766081871345029\n"
     ]
    }
   ],
   "source": [
    "from sklearn.svm import SVC\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn.datasets import load_breast_cancer\n",
    "X,y = load_breast_cancer(return_X_y=True)\n",
    "Xtr,Xte,ytr,yte = train_test_split(X,y,test_size=0.3,random_state=0)\n",
    "# unscaled\n",
    "clf1 = SVC().fit(Xtr,ytr)\n",
    "# scaled\n",
    "sc = StandardScaler().fit(Xtr)\n",
    "clf2 = SVC().fit(sc.transform(Xtr), ytr)\n",
    "print(\"Unscaled acc:\", accuracy_score(yte, clf1.predict(Xte)))\n",
    "print(\"Scaled acc:\", accuracy_score(yte, clf2.predict(sc.transform(Xte))))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5c49bbc5",
   "metadata": {},
   "source": [
    "## 30.  Write a Python program to train a Gaussian Naïve Bayes model and compare the predictions before and after Laplace Smoothing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "2c10eba5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "alpha 0.0 acc 0.0\n",
      "alpha 1.0 acc 0.0\n"
     ]
    }
   ],
   "source": [
    "from sklearn.naive_bayes import MultinomialNB\n",
    "from sklearn.feature_extraction.text import CountVectorizer\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import accuracy_score\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "\n",
    "docs = [\"spam offer\", \"buy now\", \"hello friend\", \"meeting schedule\"]\n",
    "y = [1,1,0,0]\n",
    "X = CountVectorizer().fit_transform(docs)\n",
    "Xtr,Xte,ytr,yte = train_test_split(X,y,test_size=0.5,random_state=0)\n",
    "for alpha in [0.0, 1.0]:\n",
    "    clf = MultinomialNB(alpha=alpha).fit(Xtr,ytr)\n",
    "    print(\"alpha\",alpha,\"acc\",accuracy_score(yte,clf.predict(Xte)))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "01803f9a",
   "metadata": {},
   "source": [
    "## 31. Write a Python program to train an SVM Classifier and use GridSearchCV to tune the hyperparameters (C, gamma, kernel)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "446ed573",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best params: {'C': 0.1, 'gamma': 'auto', 'kernel': 'poly'}\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.datasets import load_wine\n",
    "X,y = load_wine(return_X_y=True)\n",
    "params = {'C':[0.1,1,10], 'gamma':['scale','auto'], 'kernel':['rbf','poly']}\n",
    "gs = GridSearchCV(SVC(), params, cv=3).fit(X,y)\n",
    "print(\"Best params:\", gs.best_params_)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48958c53",
   "metadata": {},
   "source": [
    "## 32.  Write a Python program to train an SVM Classifier on an imbalanced dataset and apply class weighting and check it improve accuracy."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "9a04f690",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Unweighted report:\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       0.97      1.00      0.98       450\n",
      "           1       1.00      0.68      0.81        50\n",
      "\n",
      "    accuracy                           0.97       500\n",
      "   macro avg       0.98      0.84      0.90       500\n",
      "weighted avg       0.97      0.97      0.97       500\n",
      "\n",
      "Weighted report:\n",
      "               precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      0.99      0.99       450\n",
      "           1       0.89      1.00      0.94        50\n",
      "\n",
      "    accuracy                           0.99       500\n",
      "   macro avg       0.95      0.99      0.97       500\n",
      "weighted avg       0.99      0.99      0.99       500\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from sklearn.datasets import make_classification\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.metrics import classification_report\n",
    "X,y = make_classification(n_samples=500, weights=[0.9,0.1], flip_y=0, random_state=0)\n",
    "clf_un = SVC().fit(X,y)\n",
    "clf_w = SVC(class_weight='balanced').fit(X,y)\n",
    "print(\"Unweighted report:\\n\", classification_report(y, clf_un.predict(X)))\n",
    "print(\"Weighted report:\\n\", classification_report(y, clf_w.predict(X)))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "955560c9",
   "metadata": {},
   "source": [
    "## 33. Write a Python program to implement a Naïve Bayes classifier for spam detection using email data.\n",
    " "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "7d17ee68",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.0\n"
     ]
    }
   ],
   "source": [
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "from sklearn.naive_bayes import MultinomialNB\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import accuracy_score\n",
    "\n",
    "\n",
    "emails = [\n",
    "    \"Buy cheap products now\",\n",
    "    \"Exclusive offer for you\",\n",
    "    \"Meeting schedule update\",\n",
    "    \"Let's have lunch tomorrow\"\n",
    "]\n",
    "labels = [1, 1, 0, 0]\n",
    "vec = TfidfVectorizer()\n",
    "X = vec.fit_transform(emails)\n",
    "Xtr,Xte,ytr,yte = train_test_split(X,labels,test_size=0.3,random_state=0)\n",
    "clf = MultinomialNB().fit(Xtr,ytr)\n",
    "print(\"Accuracy:\", accuracy_score(yte, clf.predict(Xte)))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9402301f",
   "metadata": {},
   "source": [
    "## 34.  Write a Python program to train an SVM Classifier and a Naïve Bayes Classifier on the same dataset and compare their accuracy."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f2146884",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SVM acc: 0.6851851851851852\n",
      "GNB acc: 0.9629629629629629\n"
     ]
    }
   ],
   "source": [
    "from sklearn.datasets import load_wine\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.naive_bayes import GaussianNB\n",
    "from sklearn.metrics import accuracy_score\n",
    "\n",
    "X,y = load_wine(return_X_y=True)\n",
    "Xtr,Xte,ytr,yte = train_test_split(X,y,test_size=0.3,random_state=2)\n",
    "print(\"SVM acc:\", accuracy_score(yte,SVC().fit(Xtr,ytr).predict(Xte)))\n",
    "print(\"GNB acc:\", accuracy_score(yte,GaussianNB().fit(Xtr,ytr).predict(Xte)))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "008c1323",
   "metadata": {},
   "source": [
    "## 35. Write a Python program to perform feature selection before training a Naïve Bayes classifier and compare results."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "6a9d48b8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Full CV: 0.9385188635305075\n",
      "Selected CV: 0.94027324949542\n"
     ]
    }
   ],
   "source": [
    "from sklearn.feature_selection import SelectKBest, f_classif\n",
    "from sklearn.naive_bayes import GaussianNB\n",
    "from sklearn.pipeline import make_pipeline\n",
    "from sklearn.model_selection import cross_val_score\n",
    "from sklearn.datasets import load_breast_cancer\n",
    "\n",
    "X,y = load_breast_cancer(return_X_y=True)\n",
    "pipe_full = GaussianNB()\n",
    "pipe_sel = make_pipeline(SelectKBest(f_classif, k=10), GaussianNB())\n",
    "print(\"Full CV:\", cross_val_score(pipe_full,X,y,cv=5).mean())\n",
    "print(\"Selected CV:\", cross_val_score(pipe_sel,X,y,cv=5).mean())\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d6419a33",
   "metadata": {},
   "source": [
    "## 36.  Write a Python program to train an SVM Classifier using One-vs-Rest (OvR) and One-vs-One (OvO) strategies on the Wine dataset and compare their accuracy."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "7ace24bc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "OvR (LinearSVC): 0.9550793650793651\n",
      "OvO (SVC): 0.6915873015873016\n"
     ]
    }
   ],
   "source": [
    "from sklearn.svm import SVC, LinearSVC\n",
    "from sklearn.multiclass import OneVsRestClassifier, OneVsOneClassifier\n",
    "from sklearn.datasets import load_wine\n",
    "from sklearn.model_selection import cross_val_score\n",
    "\n",
    "X,y = load_wine(return_X_y=True)\n",
    "print(\"OvR (LinearSVC):\", cross_val_score(OneVsRestClassifier(LinearSVC(max_iter=10000)),X,y,cv=5).mean())\n",
    "print(\"OvO (SVC):\", cross_val_score(OneVsOneClassifier(SVC()),X,y,cv=5).mean())\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6797d13d",
   "metadata": {},
   "source": [
    "## 37.  Write a Python program to train an SVM Classifier using Linear, Polynomial, and RBF kernels on the Breast Cancer dataset and compare their accuracy."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "7b1267a9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "linear 0.9455364073901569\n",
      "poly 0.9086632510479739\n",
      "rbf 0.9121720229777983\n"
     ]
    }
   ],
   "source": [
    "from sklearn.svm import SVC\n",
    "from sklearn.datasets import load_breast_cancer\n",
    "from sklearn.model_selection import cross_val_score\n",
    "X,y = load_breast_cancer(return_X_y=True)\n",
    "for k in ['linear','poly','rbf']:\n",
    "    print(k, cross_val_score(SVC(kernel=k),X,y,cv=5).mean())\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1397c791",
   "metadata": {},
   "source": [
    "## 38. Write a Python program to train an SVM Classifier using Stratified K-Fold Cross-Validation and compute the average accuracy."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "5f68f129",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Avg acc: 0.6571428571428571\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import StratifiedKFold, cross_val_score\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.datasets import load_wine\n",
    "\n",
    "X,y = load_wine(return_X_y=True)\n",
    "skf = StratifiedKFold(n_splits=5, shuffle=True, random_state=0)\n",
    "print(\"Avg acc:\", cross_val_score(SVC(), X, y, cv=skf).mean())\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "18006dda",
   "metadata": {},
   "source": [
    "## 39. Write a Python program to train a Naïve Bayes classifier using different prior probabilities and compare performance."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "f959ce6e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "priors None cv 0.9533333333333334\n",
      "priors [0.7, 0.2, 0.1] cv 0.9533333333333334\n",
      "priors [0.3333333333333333, 0.3333333333333333, 0.3333333333333333] cv 0.9533333333333334\n"
     ]
    }
   ],
   "source": [
    "from sklearn.naive_bayes import GaussianNB\n",
    "from sklearn.datasets import load_iris\n",
    "from sklearn.model_selection import cross_val_score\n",
    "X,y = load_iris(return_X_y=True)\n",
    "for pri in [None, [0.7,0.2,0.1], [1/3]*3]:\n",
    "    clf = GaussianNB(priors=pri)\n",
    "    print(\"priors\",pri,\"cv\",cross_val_score(clf,X,y,cv=5).mean())\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f7eab2a2",
   "metadata": {},
   "source": [
    "## 40. Write a Python program to perform Recursive Feature Elimination (RFE) before training an SVM Classifier and compare accuracy."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "b7a7c41e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RFE selected acc: 0.9139264089427106\n",
      "All features acc: 0.9121720229777983\n"
     ]
    }
   ],
   "source": [
    "from sklearn.feature_selection import RFE\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.model_selection import cross_val_score\n",
    "from sklearn.datasets import load_breast_cancer\n",
    "\n",
    "X,y = load_breast_cancer(return_X_y=True)\n",
    "svc = SVC(kernel='linear')\n",
    "rfe = RFE(svc, n_features_to_select=10).fit(X,y)\n",
    "print(\"RFE selected acc:\", cross_val_score(SVC(), X[:,rfe.support_], y, cv=5).mean())\n",
    "print(\"All features acc:\", cross_val_score(SVC(), X, y, cv=5).mean())\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "627e05d8",
   "metadata": {},
   "source": [
    "## 41.  Write a Python program to train an SVM Classifier and evaluate its performance using Precision, Recall, and F1-Score instead of accuracy."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "ffd391c0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(0.7534925276153346, 0.729481045270519, 0.7290846163026615)\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import precision_recall_fscore_support\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.datasets import load_wine\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "X,y = load_wine(return_X_y=True)\n",
    "Xtr,Xte,ytr,yte = train_test_split(X,y,test_size=0.3,random_state=0)\n",
    "pred = SVC().fit(Xtr,ytr).predict(Xte)\n",
    "print(precision_recall_fscore_support(yte,pred,average='macro')[:3])  # precision, recall, f1\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ddfe7151",
   "metadata": {},
   "source": [
    "## 42.  Write a Python program to train a Naïve Bayes Classifier and evaluate its performance using Log Loss (Cross-Entropy Loss)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "6344fd75",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Log Loss: 0.1710275519904635\n"
     ]
    }
   ],
   "source": [
    "from sklearn.naive_bayes import GaussianNB\n",
    "from sklearn.metrics import log_loss\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.datasets import load_iris\n",
    "\n",
    "X,y = load_iris(return_X_y=True)\n",
    "Xtr,Xte,ytr,yte = train_test_split(X,y,test_size=0.3,random_state=1)\n",
    "clf = GaussianNB().fit(Xtr,ytr)\n",
    "probs = clf.predict_proba(Xte)\n",
    "print(\"Log Loss:\", log_loss(yte, probs))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cda765e8",
   "metadata": {},
   "source": [
    "## 43. Write a Python program to train an SVM Classifier and visualize the Confusion Matrix using seaborn."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "2e381474",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.datasets import load_wine\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "X,y = load_wine(return_X_y=True)\n",
    "Xtr,Xte,ytr,yte = train_test_split(X,y,test_size=0.3,random_state=0)\n",
    "pred = SVC().fit(Xtr,ytr).predict(Xte)\n",
    "sns.heatmap(confusion_matrix(yte,pred), annot=True, fmt='d'); plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6376fbe3",
   "metadata": {},
   "source": [
    "## 44. Write a Python program to train an SVM Regressor (SVR) and evaluate its performance using Mean Absolute Error (MAE) instead of MSE."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "91e26b34",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Absolute Error (MAE): 0.3955543084701942\n"
     ]
    }
   ],
   "source": [
    "from sklearn.datasets import fetch_california_housing\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.svm import SVR\n",
    "from sklearn.metrics import mean_absolute_error\n",
    "\n",
    "X, y = fetch_california_housing(return_X_y=True)\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=1)\n",
    "\n",
    "scaler = StandardScaler().fit(X_train)\n",
    "X_train_scaled = scaler.transform(X_train)\n",
    "X_test_scaled = scaler.transform(X_test)\n",
    "\n",
    "svr = SVR(kernel='rbf')\n",
    "svr.fit(X_train_scaled, y_train)\n",
    "\n",
    "y_pred = svr.predict(X_test_scaled)\n",
    "\n",
    "mae = mean_absolute_error(y_test, y_pred)\n",
    "print(\"Mean Absolute Error (MAE):\", mae)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3e24d4b5",
   "metadata": {},
   "source": [
    "## 45.  Write a Python program to train a Naïve Bayes classifier and evaluate its performance using the ROC-AUC score."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "fafd63c2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ROC-AUC: 0.9854497354497355\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import roc_auc_score\n",
    "from sklearn.naive_bayes import GaussianNB\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.datasets import load_breast_cancer\n",
    "\n",
    "X,y = load_breast_cancer(return_X_y=True)\n",
    "Xtr,Xte,ytr,yte = train_test_split(X,y,test_size=0.3,random_state=0)\n",
    "probs = GaussianNB().fit(Xtr,ytr).predict_proba(Xte)[:,1]\n",
    "print(\"ROC-AUC:\", roc_auc_score(yte, probs))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "17816129",
   "metadata": {},
   "source": [
    "## 46.  Write a Python program to train an SVM Classifier and visualize the Precision-Recall Curve."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "157740ea",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PR AUC: 0.992511901637912\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.metrics import precision_recall_curve, auc\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.datasets import load_breast_cancer\n",
    "\n",
    "X,y = load_breast_cancer(return_X_y=True)\n",
    "Xtr,Xte,ytr,yte = train_test_split(X,y,test_size=0.3,random_state=0)\n",
    "clf = SVC(probability=True).fit(Xtr,ytr)\n",
    "probs = clf.predict_proba(Xte)[:,1]\n",
    "p,r,_ = precision_recall_curve(yte,probs)\n",
    "print(\"PR AUC:\", auc(r,p))\n",
    "plt.plot(r,p); plt.xlabel('Recall'); plt.ylabel('Precision'); plt.title('Precision-Recall'); plt.show()\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "base",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
